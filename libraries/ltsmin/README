ltsmin - minimization and instantiation of labelled transition systems 

* Introduction
LTSmin is a toolset for manipulating labelled transition systems. The
main tool in this release is ltsmin-mpi, which is a distributed
implementation of signature-based bisimulation reduction for strong
bisimulation and branching bisimulation. The input for this tool is a
labelled transition system (LTS) in DIR format.

Various sequential, symbolic and distributed tools are provided for
the creation of LTSs, for example from muCRL, mCRL2 and PROMELA (via
NIPS) specifications. Alternatively, LTSs in DIR format can be created
by third-party tools, for example instantiators and dmp2dir from the
muCRL toolset.

The tools in this release support compression of DIR files as well as
putting a DIR in an archive file. The ltsmin-convert utility can
convert files from one DIR variant to another, and to the BCG file
format from the CADP toolset.

* Supported Systems
 - GNU/Linux (tested on Debian, Fedora, OpenSuSE 10.2)
 - MacOS X, version 10.5 "Leopard"
 - MacOS X, version 10.4 "Tiger"

* Installation Instructions
If you are building the software from a Git repository rather than a
release tarball, refer to Section "Building from a Git Repository" for
additional set-up instructions.  Then install the dependencies listed
in Section "Build Dependencies" below.

    # Unpack the tarball
    $ tar xvzf ltsmin-<version>.tar.gz
    $ cd ltsmin-<version>

    # Configure
    $ ./configure --disable-dependency-tracking --prefix /path/

It is a good idea to check the output of ./configure, to see whether
all dependencies were found.

    # Build
    $ make

    # Install
    $ make install

** Additional Build Options
*** configure options
For one-shot builds, the following option speeds up the build process
by not recording dependencies:

    ./configure --disable-dependency-tracking ...

Non-standard compilers, etc., can be configured by using variables:

    ./configure CFLAGS='-O3 -m64' MPICC=/sw/openmpi/1.2.8/bin/mpicc ...

This would add some options to the standard CFLAGS settings used for
building, to enable more optimizations and force a 64-bit build (for
the GCC C compiler).  Furthermore, the MPI compiler wrapper is set
explicitly instead of searching it in the current shell PATH.

Note that for libraries installed in non-standard places need special
attention: to be picked up by the configure script, library and header
search paths must be added, e.g.:

    ./configure LDFLAGS=-L/opt/local/lib CPPFLAGS=-I/opt/local/include

Additional setting of (DY)LD_LIBRARY_PATH might be needed for the
dynamic linker/loader (see, e.g., "man ld.so" or "man dyld").

See `./configure --help' for the list of available variables,
and file INSTALL for further details.

*** make targets
The following additional make targets are supported:

    mostlyclean::
    clean::
        Clean the source tree.

    doxygen-doc::
        Builds Doxygen documentation for the source code.


* Build Dependencies
We list the external libraries and tools which are required to build
this software.

*** popt
Download popt (>= 1.7) from <http://rpm5.org/files/popt/>.  We tested
with popt 1.14.

*** zlib
Download zlib from <http://www.zlib.net/>.

*** GNU make
Download GNU make from <http://www.gnu.org/software/make/>.

** Optional Dependencies
*** muCRL
Download muCRL from <http://www.cwi.nl/~mcrl/mutool.html>.  We tested
with muCRL-2.18.3.  Without muCRL, the distributed tool for state
space generation (lpo2lts-mpi) will not be built, and neither will any
NIPS-based tools.

*** mCRL2
Download the latest SVN version of mCRL2 from http://www.mcrl2.org/wiki/index.php/Download
Build and install mCRL2 as usual:

  ./configure <options>
  make
  make install

Then type the command:

  ./build/bin/bjam --install --install-boost-headers

This should allow the mCRL2 greybox interface to compile.

*** CADP
See the CADP website <http://www.inrialpes.fr/vasy/cadp/> on how to
obtain a licence and download the CADP toolkit.

*** MPI
In principle, any MPI library which supports MPI-IO should work.
However, we tested only with Open MPI <http://www.open-mpi.org/>.
Without MPI, the distributed tools (xxx2lts-mpi, ltsmin-mpi) will
not be built.

*** AsciiDoc
Download AsciiDoc (>= 8) from <http://www.methods.co.nz/asciidoc/>.
We tested with asciidoc-8.2.7.  Without asciidoc, documentation cannot
be rebuilt.  For convenience, release tarballs are shipping with
pre-built man pages and HTML documentation.

*** xmlto
Download xmlto from <http://cyberelk.net/tim/software/xmlto/>.  We
tested with xmlto-0.0.18.  Without xmlto, man pages cannot be rebuilt.

*** Doxygen
Download Doxygen from <http://www.doxygen.org/>.  We tested with
doxygen-1.5.5.  Without doxygen, internal source code documentation
cannot be generated.

*** MacOS X
For cross-compilation builds on MacOS X, the Apple Developer SDKs must
be installed.  They are available from Apple
<http://developer.apple.com/tools/download/>, or from the MacOS X
installation CDs.

* Building from a Git Repository
Before building the software as described above, the following commands
have to be executed in the top-level source directory:

    $ git submodule update --init
    $ ./ltsminreconf

** Dependencies
Building from another source than the release tarball requires some
extra tools to be installed:

*** GNU automake
Download automake (>= 1.10) from
<http://www.gnu.org/software/automake/>.  We tested with
automake-1.10.

*** GNU autoconf
Download autoconf (>= 2.60) from
<http://www.gnu.org/software/autoconf/>.  We tested with
autoconf-2.61.

*** GNU libtool
Download libtool (>= 1.5.26) from
<http://www.gnu.org/software/libtool/>.  We tested with
libtool-1.5.26.

*** AsciiDoc
See above.

*** xmlto
See above.


* Contact
Send questions, bug reports, comments and feature suggestions to
<ltsmin-support@cs.utwente.nl>.  New versions can be found at
<http://fmt.cs.utwente.nl/tools/ltsmin/>.

;; Local Variables:
;; mode: outline
;; End:
